import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class AddrGenerator extends KernelLib {

	private DFEVar Addr;
	private DFEVar Valid;
		
	public DFEVar getAddr() 		{return Addr;}
	public DFEVar isValid() 		{return Valid;}
	
	AddrGenerator(KernelLib owner, int Inc, int Max, DFEVar Reset) {
		
		super(owner);
		
		/////////////////////// Counter ///////////////////////

		// Reset: 0, 0, 1, 0, 0, 0, ... ,     0, 0, 0, 0, ...
		//  Addr: 0, 0, 0, 1, 2, 3, ... , Max-1, 0, 0, 0, ...
		// Valid: 0, 0, 1, 1, 1, 1, ... ,     1, 0, 0, 0, ...

		int CounterBitWidth = MathUtils.bitsToRepresentUnsigned(Max);
                Count.Params CounterParam = control.count.makeParams(CounterBitWidth)
                							.withInitValue(0)
                							.withInc(Inc)
                							.withMax(Max)
                							.withWrapMode(WrapMode.STOP_AT_MAX)
                							.withReset(Reset);
                Counter AddrCounter = control.count.makeCounter(CounterParam);
                DFEVar AddrCount = AddrCounter.getCount();

		// Address is valid when it's smaller than Max                
                Valid = Reset | (AddrCount>0) & (AddrCount<Max);
                
                // Cast in case that Max-1 and Max have different bit-width
                Addr = Valid ? AddrCount.cast(dfeUInt(MathUtils.bitsToAddress(Max))) : constant.var(dfeUInt(MathUtils.bitsToAddress(Max)), 0);
	
	}

}
