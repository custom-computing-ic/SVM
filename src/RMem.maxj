import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.RamWriteMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

import maxpower.ConstDenominator;
import maxpower.FanoutLimiter;


/**
 * This class maintains Matrix R 
 *	- Store R in small 1-by-blockDim blocks for parallelised access
 *	- Support Beta Calculation, R Initialisation, R Enlarge and R Shrink
 * 	- Assuming the maximum RSize = WinSize (theoretical maximum = WinSize+1)
 *
 *
 * @author Patrick Shao
 *
 * @param <numBlocks> Number of blocks in each 1D Dimension - WinSize = numBlocks * blockDim
 * @param <blockDim>  Number of elements in each block
 * @param <SSize> Current SSize
 * @param <SMaskIDToRemove>  SMask index of item to be removed
 * @param <betaX> REnlarge: betaX = betaBlock[XAddr] - width = numBlocks - inner loop
 * @param <betaY> REnlarge: betaY = betaBlock[YSelectAddr] - width = numBlocks - outer loop
 * @param <gammaInv> REnlarge: gammaInv = 1/gamma[k]
 * @param <beginRInit> Trigger Signal for RInit
 * @param <beginBetaCalc> Trigger Signal for Beta Calculation
 * @param <beginREnlarge> Trigger Signal for REnlarge
 * @param <beginRShrink>	Trigger Signal for RShrink
 * 
 */


class RMem extends KernelLib{

	private DFEVector<DFEVector<DFEVar>> BetaCalcVec;
	private DFEVar XAddr;
	private DFEVar YAddr;
	
	public DFEVector<DFEVector<DFEVar>> getBetaCalcVec() 	{return BetaCalcVec;}
	public DFEVar getXAddr() 		{return XAddr;}
	public DFEVar getYAddr() 		{return YAddr;}


	RMem ( 	KernelLib owner,
			int numBlocks,
			int blockDim,
			DFEVar SSize, 				// Current SSize
			DFEVar SMaskIDToRemove,  		// SMask index of item to be removed
			DFEVector<DFEVar> betaX, 	// REnlarge: betaX = betaBlock[XAddr] - width = numBlocks - inner loop
			DFEVector<DFEVar> betaY, 	// REnlarge: betaY = betaBlock[YSelectAddr] - width = numBlocks - outer loop
			DFEVar gammaInv, 			// REnlarge: gammaInv = 1/gamma[k]
			DFEVar beginRInit, 			// Trigger Signal for RInit
			DFEVar beginBetaCalc, 		// Trigger Signal for Beta Calculation
			DFEVar beginREnlarge, 		// Trigger Signal for REnlarge
			DFEVar beginRShrink) 			// Trigger Signal for RShrink

	{

		super(owner);
		
		/////////////////////// Parameters ///////////////////////
				
		int FetchCycles 	= blockDim*2;
		int FetchWait 	= Def.FetchLatency;
		int ShrinkCycles 	= blockDim*blockDim;
		int UpShiftCycles 	= blockDim*blockDim + blockDim;
		int LeftShiftCycles	= blockDim*blockDim + 1;
		int RShrinkWait 	= Def.RShrinkLatency;
		int RShrinkCycles 	= FetchCycles + FetchWait + ShrinkCycles + UpShiftCycles + LeftShiftCycles + RShrinkWait*3;
		
		
		/////////////////////// Vectors ///////////////////////

		DFEVectorType<DFEVar> numBlocksVec = new DFEVectorType<DFEVar>(Def.RType, numBlocks);
		DFEVectorType<DFEVar> RCalcVec = new DFEVectorType<DFEVar>(Def.RCalcType, numBlocks);
		DFEVectorType<DFEVector<DFEVar>> GridVec = new DFEVectorType<DFEVector<DFEVar>>(numBlocksVec, numBlocks);
		DFEVectorType<DFEVector<DFEVar>> betaGrid = new DFEVectorType<DFEVector<DFEVar>>(new DFEVectorType<DFEVar>(Def.betaType, numBlocks), numBlocks);
		BetaCalcVec = betaGrid.newInstance(this);
		
		XAddr = dfeUInt(MathUtils.bitsToAddress(blockDim)).newInstance(this);
		YAddr = dfeUInt(MathUtils.bitsToAddress(blockDim)).newInstance(this);


 		/////////////////////// RInit ///////////////////////

		// Control Signal for RInit - blockDim*2 cycles
		AddrGenerator RInitCounter = new AddrGenerator(owner, 1, blockDim*2, beginRInit);
		DFEVar isInit = RInitCounter.isValid();

		
 		/////////////////////// REnlarge ///////////////////////
 		
 		// Base and Offset Address of Edge
 		ConstDenominator.ConstDivModResult EdgeDivModResult = ConstDenominator.divMod(SSize+1, blockDim, MathUtils.bitsToAddress(blockDim));
 		DFEVar REnlargeEdgeBaseAddr = EdgeDivModResult.getQuotient();
 		DFEVar REnlargeEdgeOffsetAddr = EdgeDivModResult.getRemainder();
		
		// Control Signal for REnlarge - blockDim^2 cycles
		AddrGenerator REnlargeCounter = new AddrGenerator(owner, 1, blockDim*blockDim, beginREnlarge);
		DFEVar isEnlarging = REnlargeCounter.isValid();
		
		// betaX * gammaInv, betaY * gammaInv
		FanoutLimiter<DFEVar> gammaInvFanout = new FanoutLimiter<DFEVar>(gammaInv, Def.MaxFanout);
		DFEVector<DFEVar> betaXgammaInv = numBlocksVec.newInstance(this);
		DFEVector<DFEVar> betaYgammaInv = numBlocksVec.newInstance(this);
		for (int i=0; i<numBlocks; ++i) {
			betaXgammaInv[i] <== betaX[i] * gammaInvFanout.get();
			betaYgammaInv[i] <== betaY[i] * gammaInvFanout.get();
		}


		/////////////////////// RShrink ///////////////////////
		
		// Control Signal for RShrink -  cycles
                AddrGenerator RShrinkCounter = new AddrGenerator(owner, 1, RShrinkCycles, beginRShrink);
                DFEVar RShrinkCount = RShrinkCounter.getAddr();

		// Base and Offset Address of Edge
 		ConstDenominator.ConstDivModResult PosDivModResult = ConstDenominator.divMod(SMaskIDToRemove+1, blockDim, MathUtils.bitsToAddress(blockDim));
 		DFEVar RShrinkPosBaseAddr = PosDivModResult.getQuotient().cast(dfeUInt(MathUtils.bitsToAddress(numBlocks)));
 		DFEVar RShrinkPosOffsetAddr = PosDivModResult.getRemainder();
 		
 		// Zeroise RMem if shrink for 1 to zero
 		DFEVar RShrinkWriteZero = (SSize===1);
		

		/////////////////////// RShrink - Fetching ///////////////////////
				
		// Control Signal for Fetching
		DFEVar beginFetch = beginRShrink;
		AddrGenerator FetchingCounter = new AddrGenerator(owner, 1, FetchCycles, beginFetch);
		DFEVar FetchingCount = FetchingCounter.getAddr();
		DFEVar isFetching = FetchingCounter.isValid();
		DFEVar isFetchingX = isFetching & (FetchingCount<blockDim);
		DFEVar isFetchingY = isFetching & (FetchingCount>=blockDim);
		
		// XElem - prefetched R[k][:] for RShrink
		DFEVector<DFEVar> XElem = numBlocksVec.newInstance(this);
		DFEVector<DFEVar> toXBuffer = numBlocksVec.newInstance(this);
		for (int i=0; i<numBlocks; ++i) {
			Memory<DFEVar> XBuffer = mem.alloc(Def.RType, blockDim);
			XBuffer.port(XAddr, toXBuffer[i], isFetchingX, RamWriteMode.WRITE_FIRST);
			XElem[i] <== XBuffer.read(XAddr);
		}

		// YElem - prefetched R[:][k] for RShrink
		DFEVector<DFEVar> YElem = numBlocksVec.newInstance(this);
		DFEVector<DFEVar> toYBuffer = numBlocksVec.newInstance(this);
		for (int i=0; i<numBlocks; ++i) {
			Memory<DFEVar> YBuffer = mem.alloc(Def.RType, blockDim);
			YBuffer.port(XAddr, toYBuffer[i], isFetchingY, RamWriteMode.WRITE_FIRST);
			YElem[i] <== YBuffer.read(YAddr);
		}
		
		// 1/R[k][k] for RShrink
		DFEVar toKElemInvStreamHold = 1.0 / control.mux(RShrinkPosBaseAddr, toXBuffer.getElementsAsList());
		DFEVar enKElemInvStreamHold = (XAddr === RShrinkPosOffsetAddr) & isFetchingX;
		DFEVar KElemInv = Reductions.streamHold(toKElemInvStreamHold, enKElemInvStreamHold).cast(Def.RCalcType);
		OffsetExpr KElemInvLatency = stream.measureDistance("KElemInvLatency", toXBuffer[0], toKElemInvStreamHold);
		
		// YElem / R[K][K]
		DFEVector<DFEVar> YElemKElemInv = RCalcVec.newInstance(this);
		optimization.pushPipeliningFactor(Def.PipeFactor);
		for (int i=0; i<numBlocks; ++i) {
			YElemKElemInv[i] <== YElem[i].cast(Def.RCalcType) * KElemInv;
		}
		optimization.popPipeliningFactor();
		
		
		/////////////////////// RShrink - Shrinking, UpShifting, LeftShifting ///////////////////////
		
		// Control Signal for Shrinking
		DFEVar beginShrink = (RShrinkCount === FetchCycles + FetchWait);
		AddrGenerator ShrinkCounter = new AddrGenerator(owner, 1, ShrinkCycles, beginShrink);
		DFEVar isShrinking = ShrinkCounter.isValid();

		// Control Signal for UpShifting
		DFEVar beginUpShift = (RShrinkCount === FetchCycles + FetchWait + ShrinkCycles + RShrinkWait);
		AddrGenerator UpShiftCounter = new AddrGenerator(owner, 1, UpShiftCycles, beginUpShift);
		DFEVar isUpShifting = UpShiftCounter.isValid();
		
		// Control Signal for LeftShifting
		DFEVar beginLeftShift = (RShrinkCount === FetchCycles + FetchWait + ShrinkCycles + UpShiftCycles + RShrinkWait*2);
		AddrGenerator LeftShiftCounter = new AddrGenerator(owner, 1, LeftShiftCycles, beginLeftShift);
		DFEVar isLeftShifting = LeftShiftCounter.isValid();


		/////////////////////// Address ///////////////////////
			
		// Counter Reset Trigger
		DFEVar counterReset = beginBetaCalc | beginRInit | beginREnlarge | beginFetch | beginShrink | beginUpShift | beginLeftShift;
		debug.simPrintf(counterReset, "[%4d] ****** RMem: counter Reseted ****** beginBetaCalc=%d | beginRInit=%d | beginREnlarge=%d | beginFetch=%d | beginShrink=%d | beginUpShift=%d | beginLeftShift=%d \n", control.count.simpleCounter(32), beginBetaCalc, beginRInit, beginREnlarge, beginFetch, beginShrink, beginUpShift, beginLeftShift);

    		// XAddr - inner loop		
                Count.Params XAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(blockDim))
                							.withInitValue(0)
                							.withMax(blockDim)
                							.withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                							.withReset(counterReset);
                Counter XAddrCounter = control.count.makeCounter(XAddrCounterParam);
                XAddr <== XAddrCounter.getCount();
                
                // YAddr - outer loop
                Count.Params YAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(blockDim))
                							.withInitValue(0)
                							.withMax(blockDim)
                							.withEnable(XAddrCounter.getWrap())
                							.withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                							.withReset(counterReset);
                Counter YAddrCounter = control.count.makeCounter(YAddrCounterParam);
                YAddr <== YAddrCounter.getCount();
		

		/////////////////////// R Blocks ///////////////////////
		
		// Internal Connections
		DFEVector<DFEVector<DFEVar>> fromDownBlock = GridVec.newInstance(this);
		DFEVector<DFEVector<DFEVar>> fromRightBlock = GridVec.newInstance(this);
		
		// RBlocks
		RBlock [][] RGrid = new RBlock[numBlocks][numBlocks];
		for (int X=0; X<numBlocks; ++X) {
			for (int Y=0; Y<numBlocks; ++Y) {
				RGrid[X][Y] = new RBlock (owner, X, Y, blockDim,
				REnlargeEdgeBaseAddr, REnlargeEdgeOffsetAddr, RShrinkPosBaseAddr, RShrinkPosOffsetAddr,
				betaXgammaInv[X], betaYgammaInv[Y], betaX[X], gammaInvFanout.get(),
				XElem[X], YElemKElemInv[Y], RShrinkWriteZero, fromDownBlock[X][Y], fromRightBlock[X][Y],
				counterReset, isInit, isEnlarging, isFetching, isShrinking, isUpShifting, isLeftShifting);
				
				BetaCalcVec[Y][X] <== RGrid[X][Y].getData().cast(Def.betaType);
			}
		}
		
		// XElem
		for (int X=0; X<numBlocks; ++X) {
			DFEVector<DFEVar> toMux = numBlocksVec.newInstance(this);
			for (int Y=0; Y<numBlocks; ++Y) toMux[Y] <== RGrid[X][Y].getData();
			toXBuffer[X] <== control.mux(RShrinkPosBaseAddr, toMux.getElementsAsList());
		}
		
		// YElem
		for (int Y=0; Y<numBlocks; ++Y) {
			DFEVector<DFEVar> toMux = numBlocksVec.newInstance(this);
			for (int X=0; X<numBlocks; ++X) toMux[X] <== RGrid[X][Y].getData();
			toYBuffer[Y] <== control.mux(RShrinkPosBaseAddr, toMux.getElementsAsList());
		}
		
		// Internal Connections
		for (int X=0; X<numBlocks-1; ++X) {
			for (int Y=0; Y<numBlocks-1; ++Y) {
				fromDownBlock[X][Y] <== RGrid[X][Y+1].getData();
				fromRightBlock[X][Y] <== RGrid[X+1][Y].forLeftBlock();
			}
			fromDownBlock[X][numBlocks-1] <== constant.var(Def.RType, 0);
			fromRightBlock[X][numBlocks-1] <== RGrid[X+1][numBlocks-1].forLeftBlock();
		}
		for (int Y=0; Y<numBlocks-1; ++Y) {
			fromDownBlock[numBlocks-1][Y] <== RGrid[numBlocks-1][Y+1].getData();
			fromRightBlock[numBlocks-1][Y] <== constant.var(Def.RType, 0);
		}
		fromDownBlock[numBlocks-1][numBlocks-1] <== constant.var(Def.RType, 0);
		fromRightBlock[numBlocks-1][numBlocks-1] <== constant.var(Def.RType, 0);

	
	}


	private class RBlock extends KernelLib {
	
		private final DFEVar readItem;
		private final DFEVar toLeftBlock;

		public DFEVar getData() 		{return readItem;}
		public DFEVar forLeftBlock() 		{return toLeftBlock;}

		RBlock ( 	KernelLib owner, 
				int X, 
				int Y,
				int blockDim, 
				DFEVar REnlargeEdgeBaseAddr, 					// REnlarge: Base Address of the Edge
				DFEVar REnlargeEdgeOffsetAddr, 				// REnlarge: Offset Address of the Edge
				DFEVar RShrinkPosBaseAddr, 					// RShrink: Base Address of Remove Position
				DFEVar RShrinkPosOffsetAddr, 					// RShrink: Offset Address of Remove Position
				DFEVar betaXgammaInv, 						// REnlarge: beta[X] * gammaInv
				DFEVar betaYgammaInv,						// REnlarge: beta[Y] * gammaInv
				DFEVar betaX, 								// REnlarge: beta[X]
				DFEVar gammaInv, 							// REnlarge: 1/gamma_k
				DFEVar XElem, 								// RShrink: Elem from Vertical Line
				DFEVar YElemKElemInv, 						// RShrink: Elem from Horizontal Line / R[K][K]
				DFEVar RShrinkWriteZero, 						// RShrink: Zeroise the RMem
				DFEVar fromDownBlock, 						// Data for RShrink - UpShifting
				DFEVar fromRightBlock, 						// Data for RShrink - LeftShifting
				DFEVar counterReset,							// Counter Reset Trigger
				DFEVar isInit, 								// Control Variable for RInit
				DFEVar isEnlarging, 							// Control Variable for REnlarge
				DFEVar isFetching,  							// Control Variable for RShrink - Fetching
				DFEVar isShrinking,  							// Control Variable for RShrink - Shrinking
				DFEVar isUpShifting, 							// Control Variable for RShrink - UpShifting
				DFEVar isLeftShifting) 							// Control Variable for RShrink - LeftShifting

		{
			
			super(owner);

			
			/////////////////////// Address ///////////////////////
			
			// blockAddress Type
			DFEType blockAddrType = dfeUInt(MathUtils.bitsToAddress(blockDim*blockDim));
			
			// Block Addr - whole block
			AddrGenerator BlockAddrCounter = new AddrGenerator(owner, 1, blockDim*blockDim, counterReset);
			DFEVar blockAddr = BlockAddrCounter.getAddr();
			DFEVar blockAddrValid = BlockAddrCounter.isValid();
		
    			// XAddr - inner loop
    			DFEVar XAddrCounterReset = counterReset | (isUpShifting & (blockAddr===blockDim));
			Count.Params XAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(blockDim))
                									.withInitValue(0)
                									.withMax(blockDim)
                									.withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                									.withReset(XAddrCounterReset);
			Counter XAddrCounter = control.count.makeCounter(XAddrCounterParam);
			DFEVar XAddr = XAddrCounter.getCount();
                
			// YAddr - outer loop
			DFEVar YAddrCounterReset = counterReset | (isUpShifting & (blockAddr===blockDim));
                	Count.Params YAddrCounterParam = control.count.makeParams(MathUtils.bitsToAddress(blockDim))
                									.withInitValue(0)
                									.withMax(blockDim)
                									.withEnable(XAddrCounter.getWrap())
                									.withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                									.withReset(YAddrCounterReset);
			Counter YAddrCounter = control.count.makeCounter(YAddrCounterParam);
			DFEVar YAddr = YAddrCounter.getCount();
		
			
			/////////////////////// Memory - Read ///////////////////////
			
			Memory<DFEVar> block = mem.alloc(Def.RType, blockDim*blockDim);
			DFEVar readAddr = dfeUInt(MathUtils.bitsToAddress(blockDim*blockDim)).newInstance(this);
			readItem = block.read(readAddr);
			
			Memory<DFEVar> buffer = mem.alloc(Def.RType, blockDim);
			DFEVar bufferItem = buffer.read(XAddr);
			buffer.port(XAddr, fromDownBlock, isUpShifting & blockAddrValid & (blockAddr<blockDim), RamWriteMode.WRITE_FIRST);


			/////////////////////// RInit ///////////////////////
			
			// Write - blockDim*2 cycles
			// Write Data - PortAddr = blockAddr
			DFEVar RInitPortData = Def.RType.newInstance(this);
			if ((X==0)&&(Y==0)) RInitPortData <== counterReset ? -1 : (((XAddr===0)&(YAddr===1)) | ((XAddr===1)&(YAddr===0))) ? constant.var(Def.RType, 1) : 0;
			else RInitPortData <== constant.var(Def.RType, 0);
			DFEVar RInitPortEn = isInit & blockAddrValid;


			/////////////////////// REnlarge ///////////////////////
			
			// Write - blockDim^2 cycles
			// Judge the location
			DFEVar isREnlargeXEdge 	= (X === REnlargeEdgeBaseAddr) & (XAddr === REnlargeEdgeOffsetAddr);
			DFEVar isREnlargeYEdge 	= (Y === REnlargeEdgeBaseAddr) & (YAddr === REnlargeEdgeOffsetAddr);
			DFEVar isREnlargeCorner 	= isREnlargeXEdge & isREnlargeYEdge;
			
			// Write Data - PortAddr = blockAddr
			optimization.pushPipeliningFactor(Def.PipeFactor);
			DFEVar toREnlargeInnerData 	= readItem.cast(Def.RCalcType) + betaX.cast(Def.RCalcType) * betaYgammaInv.cast(Def.RCalcType);
			DFEVar REnlargeInnerData 		= toREnlargeInnerData.cast(Def.RType);
			DFEVar REnlargeXEdgeData 	= betaYgammaInv;
			DFEVar REnlargeYEdgeData 	= betaXgammaInv;
			DFEVar REnlargeCornerData 	= gammaInv;
			optimization.popPipeliningFactor();
			DFEVar REnlargePortData = isREnlargeCorner ? REnlargeCornerData : (isREnlargeXEdge ? REnlargeXEdgeData : (isREnlargeYEdge ? REnlargeYEdgeData : REnlargeInnerData));
			DFEVar REnlargePortEn = isEnlarging & blockAddrValid;
			OffsetExpr REnlargeLatency = stream.measureDistance("REnlargeLatency"+X+Y, readItem, REnlargeInnerData);


			/////////////////////// RShrink ///////////////////////

			// blockDim cycles
			// Fetching
			DFEVar FetchReadAddrH 	= RShrinkPosOffsetAddr.cast(blockAddrType) * blockDim + XAddr.cast(blockAddrType); // horizontal items
			DFEVar FetchReadAddrV 	= XAddr.cast(blockAddrType) * blockDim + RShrinkPosOffsetAddr.cast(blockAddrType); // vertical items
			DFEVar FetchReadAddr 	= (blockAddr < blockDim) ? FetchReadAddrH : FetchReadAddrV;

			// Sequential Write - blockDim^2 cycles
			// Shrinking - PortAddr = blockAddr
			optimization.pushPipeliningFactor(Def.PipeFactor);
			DFEVar toShrinkPortData = RShrinkWriteZero ? 0 : readItem.cast(Def.RCalcType) - XElem.cast(Def.RCalcType) * YElemKElemInv;
			optimization.popPipeliningFactor();
			DFEVar ShrinkPortData = toShrinkPortData.cast(Def.RType);
			DFEVar ShrinkPortEn = isShrinking & blockAddrValid;
			
			// There is a latency of calculating ShrinkPortData - must ensure the result is written to the memory before shifting.
			// Therefore, blockDim should be greater than that latency, or we need to wait for a number of cycles.
			OffsetExpr RShrinkCalcLatency = stream.measureDistance("RShrinkCalcLatency"+X+Y, readItem, ShrinkPortData);

			// blockDim^2 + blockDim cycles
			// Up Shifting - readAddr = blockAddr
			DFEVar UpShiftCounterReset = isUpShifting & (blockAddr===blockDim);
			AddrGenerator UpShiftWriteAddrCounter = new AddrGenerator(owner, 1, blockDim*blockDim, UpShiftCounterReset);
			DFEVar UpShiftWriteAddr = UpShiftWriteAddrCounter.getAddr();
			DFEVar UpShiftWriteAddrValid = UpShiftWriteAddrCounter.isValid();
			DFEVar UpShiftPortData = (YAddr===blockDim-1) ? bufferItem : readItem;
			DFEVar UpShiftPortEn = ((Y>RShrinkPosBaseAddr) | (  (Y===RShrinkPosBaseAddr) & (YAddr>=RShrinkPosOffsetAddr) )) & UpShiftWriteAddrValid;		

			// blockDim^2+1 cycles
			// Left Shifting - readAddr = blockAddr
			toLeftBlock = Reductions.streamHold(readItem, XAddr===0);
			DFEVar LeftShiftCounterReset = (blockAddr===1);
			AddrGenerator LeftShiftWriteAddrCounter = new AddrGenerator(owner, 1, blockDim*blockDim, LeftShiftCounterReset);
			DFEVar LeftShiftWriteAddr = LeftShiftWriteAddrCounter.getAddr();
			DFEVar LeftShiftWriteAddrValid = LeftShiftWriteAddrCounter.isValid();
			DFEVar LeftShiftPortData = (XAddr===0)	? fromRightBlock : readItem;
			DFEVar LeftShiftPortEn = isLeftShifting & LeftShiftWriteAddrValid & ((X>RShrinkPosBaseAddr) | ((X===RShrinkPosBaseAddr) & ((XAddr > RShrinkPosOffsetAddr) | (XAddr===0))) );

			// Write Data - RShrink Overall 
			DFEVar ShiftPortAddr = isUpShifting ? UpShiftWriteAddr : LeftShiftWriteAddr;
			DFEVar RShrinkPortData = isShrinking ? ShrinkPortData : (isUpShifting ? UpShiftPortData : LeftShiftPortData);
			DFEVar RShrinkPortEn = ShrinkPortEn | UpShiftPortEn | LeftShiftPortEn;


			/////////////////////// Memory ///////////////////////
			
			// ReadAddr
			optimization.pushPipeliningFactor(0);
			readAddr <== isFetching ? FetchReadAddr : blockAddr;
			optimization.popPipeliningFactor();
			
			// Stream Offset
			OffsetExpr RBlockOffset = stream.makeOffsetAutoLoop("OffsetRBlockX"+X+"Y"+Y);

			// Write Data
			DFEVar PortDataUnOffseted = isEnlarging ? REnlargePortData : RShrinkPortData;
			DFEVar PortData = isInit ? RInitPortData : stream.offset(PortDataUnOffseted, -RBlockOffset);
			// Write Addr
			DFEVar PortAddrUnOffseted = (isUpShifting | isLeftShifting) ? ShiftPortAddr : blockAddr;
			DFEVar PortAddr = isInit ? blockAddr : stream.offset(PortAddrUnOffseted, -RBlockOffset);
			// Write Enable
			DFEVar PortWrEnUnOffseted = REnlargePortEn | RShrinkPortEn;
			DFEVar PortWrEn = isInit ? RInitPortEn : stream.offset(PortWrEnUnOffseted, -RBlockOffset);
			// Write
			block.port(PortAddr, PortData, PortWrEn, RamWriteMode.WRITE_FIRST);


//			if ((X==0) && (Y==0)) debug.simPrintf((isInit | isEnlarging) & (PortWrEnUnOffseted | PortWrEn), "[%4d] [RBlock00] Block[%3d]=>%f, beta[%d]=%f, beta[%d]=%f, gammaInv=%f, Block[%3d]<=%f, En=%d (R+=%d, R-=%d) | Offseted: Block[%3d]<=%f, En=%d \n", control.count.simpleCounter(32), readAddr, readItem, XAddr, betaX, YAddr, betaY, gammaInv, PortAddrUnOffseted, PortDataUnOffseted, PortWrEnUnOffseted, REnlargePortEn, RShrinkPortEn, PortAddr, PortData, PortWrEn);

//			if ((X==0) && (Y==0)) debug.simPrintf((PortWrEnUnOffseted | PortWrEn), "[%4d] [RBlock00] Block[%3d]=>%f, XElem[%d]=%f, YElem[%d]=%f, KElemInv=%f, Block[%3d]<=%f, En=%d | Offseted: Block[%3d]<=%f, En=%d \n", control.count.simpleCounter(32), readAddr, readItem, XAddr, XElem, YAddr, YElem, KElemInv, PortAddrUnOffseted, PortDataUnOffseted, PortWrEnUnOffseted, PortAddr, PortData, PortWrEn);

		}
	
	}

}
