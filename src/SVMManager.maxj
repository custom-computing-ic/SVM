import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class SVMManager extends CustomManager{

	private static final String Name  = "SVMKernel";

	SVMManager(EngineParameters ep) {
	
		super(ep);

		KernelBlock k = addKernel(new SVMKernel(makeKernelParameters(Name), Def.numBlocks, Def.blockDim, Def.streamLength));

		k.getInput("Xc") <== addStreamFromCPU("Xc");
		k.getInput("Yc") <== addStreamFromCPU("Yc");
		addStreamToCPU("output") <== k.getOutput("output");
	}

	private static EngineInterface interfaceDefault() {
	
		EngineInterface engine_interface = new EngineInterface();

		// Ticks
		InterfaceParam numTicks = engine_interface.addParam("numTicks", CPUTypes.INT);
		engine_interface.setTicks(Name, numTicks);
		
		// Inputs
		InterfaceParam numItems 	= engine_interface.addConstant(Def.streamLength);
		InterfaceParam dataDim 	= engine_interface.addConstant(Def.DataDim);
		engine_interface.setStream("Xc", CPUTypes.FLOAT, numItems * dataDim * CPUTypes.FLOAT.sizeInBytes());
		engine_interface.setStream("Yc", CPUTypes.FLOAT, numItems * CPUTypes.FLOAT.sizeInBytes());
		
		// Output
		engine_interface.setStream("output", CPUTypes.INT32, numTicks * CPUTypes.INT32.sizeInBytes());
		
		return engine_interface;
	}

	public static void main(String[] args) {
	
		SVMManager manager = new SVMManager(new EngineParameters(args));
		manager.config.setAllowNonMultipleTransitions(true);
		
		BuildConfig Config = new BuildConfig(BuildConfig.Level.FULL_BUILD);
                Config.setBuildEffort(BuildConfig.Effort.HIGH);
                Config.setMPPRCostTableSearchRange(1, 6);
                Config.setMPPRParallelism(6);
                manager.setBuildConfig(Config);
		
		manager.createSLiCinterface(interfaceDefault());
		manager.build();
	}
	
}
