import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.DFEArchitecture;

public class SVMManager extends CustomManager{

	private static final String Name  = "SVMKernel";

	SVMManager(EngineParameters ep) {
	
		super(ep);
		
		///////////////////////// FPGA Configuration /////////////////////////
		
		if (ep.getDFEModel().getDFEArchitecture() == DFEArchitecture.MAX4_Maia) {
			BuildConfig Config = new BuildConfig(BuildConfig.Level.FULL_BUILD);
                	Config.setBuildEffort(BuildConfig.Effort.HIGH);
                	Config.setMPPRCostTableSearchRange(1, 20);
                	Config.setMPPRParallelism(6);
                	Config.setEnableTimingAnalysis(true);
                	setBuildConfig(Config);
                	config.setDefaultStreamClockFrequency(Def.KernelFrequencyMAX4);
                	config.setAllowNonMultipleTransitions(true);
		}
		else if (ep.getDFEModel().getDFEArchitecture() == DFEArchitecture.MAX3) {
			BuildConfig Config = new BuildConfig(BuildConfig.Level.FULL_BUILD);
                	Config.setBuildEffort(BuildConfig.Effort.HIGH);
                	Config.setMPPRCostTableSearchRange(1, 20);
                	Config.setMPPRParallelism(10);
                	Config.setEnableTimingAnalysis(true);
                	setBuildConfig(Config);
			config.setDefaultStreamClockFrequency(Def.KernelFrequencyMAX3);
			config.setAllowNonMultipleTransitions(true);
		}
		else {
			config.setAllowNonMultipleTransitions(true);
			System.out.println("[ERROR] Unknown board model "+ep.getDFEModel().toString()+", using default FPGA settings.");
		}
		

		///////////////////////// Kernel Configuration /////////////////////////

		KernelBlock k = addKernel(new SVMKernel(makeKernelParameters(Name), Def.numBlocks, Def.blockDim, Def.streamLength));
		k.getInput("Xc") <== addStreamFromCPU("Xc");
		k.getInput("Yc") <== addStreamFromCPU("Yc");
		addStreamToCPU("output") <== k.getOutput("output");

	}

	private static EngineInterface interfaceDefault() {
	
		EngineInterface engine_interface = new EngineInterface();

		// Ticks
		InterfaceParam numTicks = engine_interface.addParam("numTicks", CPUTypes.INT);
		engine_interface.setTicks(Name, numTicks);
		
		// Inputs
		InterfaceParam numItems 	= engine_interface.addConstant(Def.streamLength);
		InterfaceParam dataDim 	= engine_interface.addConstant(Def.DataDim);
		engine_interface.setStream("Xc", CPUTypes.FLOAT, numItems * dataDim * CPUTypes.FLOAT.sizeInBytes());
		engine_interface.setStream("Yc", CPUTypes.FLOAT, numItems * CPUTypes.FLOAT.sizeInBytes());
		
		// Output
		engine_interface.setStream("output", CPUTypes.INT32, numTicks * CPUTypes.INT32.sizeInBytes());
		
		return engine_interface;
	}

	public static void main(String[] args) {
	
		SVMManager manager = new SVMManager(new EngineParameters(args));
		manager.createSLiCinterface(interfaceDefault());
		manager.build();
		
	}
	
}
