package maxpower;

import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmValue;
import com.maxeler.maxcompiler.v2.statemachine.StateMachineLib;
import com.maxeler.maxcompiler.v2.statemachine.types.DFEsmValueType;

/**
 * An implementation of a queue (FIFO) for use within state machines, built upon SMArrayList.
 *
 * The front of the list is at index 0.
 *
 * It is the responsibility of the user to ensure that only one method affecting
 * state (push, pop, clear) is called on any given cycle. Otherwise, the resulting
 * state will be inconsistent. The pushPop method provided may assist in such instances.
 * These methods will only affect state for the next cycle.
 *
 * @author Chris Jones
 */
public class SMQueue extends StateMachineLib {
	private final SMArrayList impl;

	/**
	 * Constructs a new state machine queue.
	 *
	 * @param owner the containing state machine library
	 * @param type the contained type
	 * @param capacity the maximum depth of the queue
	 */
	public SMQueue(StateMachineLib owner, DFEsmValueType type, int capacity) {
		super(owner);
		impl = new SMArrayList(owner, type, capacity);
	}

	/**
	 * Perform both <tt>push</tt> and <tt>pop</tt> methods.
	 */
	public DFEsmValue pushPop(DFEsmValue val) {
		return pushPop(constant.value(true), constant.value(true), val);
	}

	/**
	 * Perform both <tt>push</tt> and <tt>pop</tt> methods.
	 *
	 * @param val the value to be added
	 * @return the value being removed
	 */
	public DFEsmValue pushPop(DFEsmValue push, DFEsmValue pop, DFEsmValue val) {
		IF (push & pop) {
			for (int n = 0; n < capacity()-1; ++n)
				impl.data[n].next <== impl.data[n+1];

			for (int n = 0; n < capacity(); ++n) {
				IF (size() === n+1) {
					impl.data[n].next <== val;
				}
			}
		} ELSE IF (push) {
			push(val);
		} ELSE IF (pop) {
			pop();
		}

		return get(0);
	}

	/**
	 * Append value to the back of the queue.
	 *
	 * @param val the value to be added
	 */
	public void push(DFEsmValue val) {
		impl.add(val);
	}

	/**
	 * Remove value from the front of the queue.
	 *
	 * @return the value being removed
	 */
	public DFEsmValue pop() {
		return impl.remove(0);
	}

	/**
	 * @return the value at the front of the queue
	 */
	public DFEsmValue peek() {
		return get(0);
	}

	/**
	 * Reset the size to zero.
	 */
	public void clear() {
		impl.clear();
	}

	/**
	 * @return the value at given index
	 */
	public DFEsmStateValue get(int idx) {
		return impl.get(idx);
	}

	/**
	 * @return the value at given index
	 */
	public DFEsmValue get(DFEsmValue idx) {
		return impl.get(idx);
	}

	/**
	 * @return the number of values contained
	 */
	public DFEsmValue size() {
		return impl.size();
	}

	/**
	 * @return the maximum number of values which can be contained
	 */
	public int capacity() {
		return impl.capacity();
	}

	/**
	 * @return <tt>true</tt> if no values are contained
	 */
	public DFEsmValue isEmpty() {
		return impl.isEmpty();
	}

	/**
	 * @return <tt>true</tt> if full to capacity
	 */
	public DFEsmValue isFull() {
		return impl.isFull();
	}
}
