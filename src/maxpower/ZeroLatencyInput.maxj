package maxpower;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.Optimization.PipelinedOps;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObject;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmInput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmOutput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmValue;
import com.maxeler.maxcompiler.v2.statemachine.kernel.KernelStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.types.DFEsmValueType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * @author Chris Jones
 */
public class ZeroLatencyInput {
	private static final int COUNT_BITS = 48;

	/**
	 * Creates a state machine which pre-buffers an input stream, enable the input to be read with zero latency.
	 * Typical usage is within a loop in which the smallest possible latency is required (outside of loops input latency is irrelevant).
	 *
	 * It should behave identically to a standard io.input, with one <b>important</b> caveat: a scalar input specifying the number of elements
	 * on the input stream must be set. This scalar input with be named: kernelName.streamName_ZLI_inputLength
	 *
	 * For a typical example usage see the ZLIRunLengthDecoder test.
	 */
	public static <T extends KernelObject<T>> T input(String name, KernelType<T> type, DFEVar control) {
		KernelLib owner = control.getKernel();
		DFEVar inputLength = owner.io.scalarInput(name+"_ZLI_inputLength", DFETypeFactory.dfeUInt(COUNT_BITS));
		return input(name, type, control, inputLength);
	}

	/**
	 * Creates a state machine which pre-buffers an input stream, enable the input to be read with zero latency.
	 * Typical usage is within a loop in which the smallest possible latency is required (outside of loops input latency is irrelevant).
	 *
	 * This version takes an explicit inputLength as an extra parameter.
	 *
	 * For a typical example usage see the ZLIRunLengthDecoder test.
	 */
	public static <T extends KernelObject<T>> T input(String name, KernelType<T> type, DFEVar control, DFEVar inputLength) {
		KernelLib owner = control.getKernel();

		DFEVar streamEnableLoopBack = DFETypeFactory.dfeBool().newInstance(owner);

		T streamIn = owner.io.input(name, type, streamEnableLoopBack);
		int inputLatency = owner.io.getInputNode(name).getLatency();

		SMIO sm = owner.addStateMachine(name+"_ZLI", new ZeroLatencyInputSM(owner, type.getTotalBits(), inputLatency));
		sm.connectInput("inputLength", inputLength);
		sm.connectInput("streamIn", streamIn.pack().cast(DFETypeFactory.dfeUInt(type.getTotalBits())));
		sm.connectInput("streamEnableLoopBack", streamEnableLoopBack);
		sm.connectInput("control", control);

		Params params = owner.control.count.makeParams(MathUtils.bitsToRepresent(inputLatency))
		                                   .withMax(inputLatency).withWrapMode(WrapMode.STOP_AT_MAX);
		Counter count = owner.control.count.makeCounter(params);

		DFEVar select    = (count.getCount() < inputLatency);
		DFEVar initValue = (count.getCount().cast(inputLength.getType()) < inputLength);

		owner.optimization.pushPipeliningFactor(0, PipelinedOps.ALL);
		streamEnableLoopBack <== select ? initValue : owner.stream.offset(sm.getOutput("streamEnable"), -inputLatency);
		owner.optimization.popPipeliningFactor(PipelinedOps.ALL);

		return type.unpack(sm.getOutput("dataOut").cast(DFETypeFactory.dfeRawBits(type.getTotalBits())));
	}

	static class ZeroLatencyInputSM extends KernelStateMachine {
		ZeroLatencyInputSM(KernelLib owner, int dataBits, int inputLatency) {
			super(owner);

			DFEsmValueType dType = dfeUInt(dataBits); // the type is irrelevant, provided bit width is correct

			DFEsmInput  streamIn    = io.input("streamIn", dType);
			DFEsmOutput dataOut     = io.output("dataOut", dType);
			DFEsmInput  control     = io.input("control", dfeBool());
			DFEsmInput  inputLength = io.input("inputLength", dfeUInt(COUNT_BITS));

			DFEsmStateValue numRequested = state.value(dfeUInt(COUNT_BITS), inputLatency);
			DFEsmStateValue firstRead    = state.value(dfeBool(), true);

			SMQueue    buffer = new SMQueue(this, dType, inputLatency+1); // we need one extra
			DFEsmValue push   = io.input("streamEnableLoopBack", dfeBool());
			DFEsmValue pop    = control & ~firstRead;
			buffer.pushPop(push, pop, streamIn);

			DFEsmValue streamEnable = control & (numRequested < inputLength);
			io.output("streamEnable", dfeBool()) <== streamEnable;

			IF (streamEnable) numRequested.next <== numRequested + 1;

			// by default send the same value as previously
			dataOut <== buffer[0];

			IF (control) {
				firstRead.next <== false;

				IF (firstRead) { // special case
					IF (buffer.isEmpty()) { // first cycle
						dataOut <== streamIn;
					}
				} ELSE {
					IF (buffer.size() > 1) {
						dataOut <== buffer[1];
					} ELSE {
						dataOut <== streamIn;
					}
				}
			}
		}
	}
}
