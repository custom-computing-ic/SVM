import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.RamWriteMode;


/**
 * This block maintains theta
 *
 * @author Patrick Shao
 *
 * @param <name>  Name of this block
 * @param <numBlocks> Number of blocks in the array
 * @param <blockDim> 1D Dimension of the block
 * @param <dataIn> incoming data item to be written
 * @param <BaseAddrWrite> Base Address of item to write
 * @param <OffsetAddrWrite> Offset Address of item to write
 * @param <immediateWrite> Immediately write data on the position, surpassing iterating mode
 * @param <EnIterateWrite> Enable memory update while iterating
 * @param <beginIterate> Trigger of iterating - valid on the cycle that Xc arrives
 */

class thetaCalc extends KernelLib{

	private DFEVector<DFEVar> VecOUT;
	private DFEVar ValOUT;
		
	public DFEVector<DFEVar> getDataVec() 		{return VecOUT;}
	public DFEVar getDataVal() 			{return ValOUT;}
	
	
	thetaCalc ( 	KernelLib owner, 
					String name, 
					int numBlocks, 
					int blockDim, 
					DFEVar dataIn, 
					DFEVar BaseAddrWrite, 
					DFEVar OffsetAddrWrite,
					DFEVar BaseAddrRead, 
					DFEVar OffsetAddrRead, 
					DFEVar immediateWrite,
					DFEVar EnIterateWrite, 
					DFEVar beginIterate) 
	{
		
		super(owner);
		
		/////////////////////// Type ///////////////////////		
		
		DFEVectorType<DFEVar> VecType = new DFEVectorType<DFEVar>(Def.thetaType, numBlocks);
		
		/////////////////////// Memory ///////////////////////
                
                // Address
                AddrGenerator XAddrGen = new AddrGenerator(owner, 1, blockDim, beginIterate);
                DFEVar XAddr = XAddrGen.getAddr();
		
		// Data
		VecOUT 						= VecType.newInstance(this);
		DFEVector<DFEVar> toMux 	= VecType.newInstance(this);
		
		// Memory
		for(int i=0; i<numBlocks; ++i) {
			Memory<DFEVar> block = mem.alloc(Def.thetaType, blockDim);
			block.mapToCPU(name+i);
			DFEVar WrAddr 	= immediateWrite ? OffsetAddrWrite : XAddr;
			DFEVar WrData 	= dataIn;
			DFEVar WrEn 		= (BaseAddrWrite === i) & (immediateWrite | (EnIterateWrite & (OffsetAddrWrite === XAddr)));
			VecOUT[i] 		<== block.port(WrAddr, WrData, WrEn, RamWriteMode.WRITE_FIRST);
			toMux[i] 			<== block.read(OffsetAddrRead);
		}
		ValOUT = control.mux(BaseAddrRead, toMux.getElementsAsList());

	}

}
