import org.junit.Test;
import java.util.List;

import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class SimpleDataTest {



	@Test
	public void testSimpleData() {
	
		/////////////////////// Settings ///////////////////////
		
		final int numTicks = 320000;
		final int numBlocks = 4;
		final int blockDim = 4;
		final int dataDim = 1;
		final int streamLength = 38;

		/////////////////////// Kernel and Manager ///////////////////////
		
		SimulationManager mgr = new SimulationManager("SimpleDataTest");
		// set Kernel Configuration - ignore read/write collision during simulation
		mgr.getCurrentKernelConfig().simulation.setRAMAddressCollisionBehaviour(KernelConfiguration.SimulationOptions.SimulationBehaviour.IGNORE);
		// create kernel
		SVMKernel kernel = new SVMKernel(mgr.makeKernelParameters(),  numBlocks, blockDim, dataDim);
		mgr.setKernel(kernel);
		
		
		/////////////////////// Initialisation ///////////////////////
	
		// init dataX and dataY
		mgr.setMappedRam("dataXBlock0Dim0", 0, 0.0);
		mgr.setMappedRam("dataXBlock0Dim0", 1, 1.0);
		mgr.setMappedRam("dataY", 0, 1455.219971);
		mgr.setMappedRam("dataY", 1, 1399.420044);
		// init theta
		mgr.setMappedRam("theta0", 0, 1000.0);
		mgr.setMappedRam("theta0", 1, -1000.0);
		// init b
		mgr.setMappedRam("b", 0, 1427.3200075);
		// init Q
		for (int i=0; i<blockDim*blockDim; ++i) mgr.setMappedRam("QBlockX0Y0", i, 0.0);
		mgr.setMappedRam("QBlockX0Y0", 0*blockDim+0, 1.0);
		mgr.setMappedRam("QBlockX0Y0", 0*blockDim+1, 0.99004983374916811);
		mgr.setMappedRam("QBlockX0Y0", 1*blockDim+0, 0.99004983374916811);
		mgr.setMappedRam("QBlockX0Y0", 1*blockDim+1, 1.0);
		// init Group
                mgr.setStateMachineMappedRam("SVMControl", "Group", 0, 2);
                mgr.setStateMachineMappedRam("SVMControl", "Group", 1, 2); 
                // init hXi
                mgr.setMappedRam("hXi", 0, -17.949797249168114);
                mgr.setMappedRam("hXi", 1, 17.949797249168114);
                // init Scalar
                mgr.setScalarInput("numSamples", streamLength+2);
                mgr.setScalarInput("Xc_ZLI_inputLength", streamLength);
                mgr.setScalarInput("Yc_ZLI_inputLength", streamLength);
		
		/////////////////////// Set Input Data ///////////////////////

		double [][] Xc = {	{2}, {3}, {4}, {5}, {6}, {7}, {8}, {9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},
						{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37},{38},{39}};
		double [] Yc = {	1402.109985, 1403.449951, 1441.469971, 1457.599976, 1438.560059, 1432.250000, 1449.680054, 1465.150024,
						1455.140015, 1455.900024, 1445.569946, 1441.359985, 1401.530029, 1410.030029, 1404.089966, 1398.560059, 
						1360.160034, 1394.459961, 1409.280029, 1409.119995, 1424.969971, 1424.369995, 1424.239990, 1441.719971, 
						1411.709961, 1416.829956, 1387.119995, 1389.939941, 1402.050049, 1387.670044, 1388.260010, 1346.089966, 
						1352.170044, 1360.689941, 1353.430054, 1333.359985, 1348.050049, 1366.420044};
		
		List<Bits> XcRawBits = Def.FloatVectorDataGenerator(Xc, streamLength, dataDim);
		mgr.setInputDataRaw("Xc", XcRawBits);
		mgr.setInputData("Yc", Yc);
		
		/////////////////////// Run ///////////////////////
		
		mgr.setKernelCycles(numTicks);
		mgr.runTest();
	}
	
}
