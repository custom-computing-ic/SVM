import org.junit.Test;
import java.util.List;

import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class SimpleDataTest {



	@Test
	public void testSimpleData() {
	
		/////////////////////// Settings ///////////////////////
		
		final int numTicks = 45000;
		final int numBlocks = 4;
		final int blockDim = 20;
		final int dataDim = 1;
		final int streamLength = 8;

		/////////////////////// Kernel and Manager ///////////////////////
		
		SimulationManager mgr = new SimulationManager("SimpleDataTest");
		// set Kernel Configuration - ignore read/write collision during simulation
		mgr.getCurrentKernelConfig().simulation.setRAMAddressCollisionBehaviour(KernelConfiguration.SimulationOptions.SimulationBehaviour.IGNORE);
		// create kernel
		SVMKernel kernel = new SVMKernel(mgr.makeKernelParameters(),  numBlocks, blockDim, dataDim, streamLength);
		mgr.setKernel(kernel);
		
		
		/////////////////////// Initialisation ///////////////////////
	
		// init dataX and dataY
		mgr.setMappedRam("dataXBlock0Dim0", 0, 0.0);
		mgr.setMappedRam("dataXBlock0Dim0", 1, 1.0);
		mgr.setMappedRam("dataY", 0, 1455.219971);
		mgr.setMappedRam("dataY", 1, 1399.420044);
		// init theta
		mgr.setMappedRam("theta0", 0, 1000.0);
		mgr.setMappedRam("theta0", 1, -1000.0);
		// init b
		mgr.setMappedRam("b", 0, 1427.3200075);
		// init Q
		for (int i=0; i<blockDim*blockDim; ++i) mgr.setMappedRam("QBlockX0Y0", i, 0.0);
		mgr.setMappedRam("QBlockX0Y0", 0*blockDim+0, 1.0);
		mgr.setMappedRam("QBlockX0Y0", 0*blockDim+1, 0.99004983374916811);
		mgr.setMappedRam("QBlockX0Y0", 1*blockDim+0, 0.99004983374916811);
		mgr.setMappedRam("QBlockX0Y0", 1*blockDim+1, 1.0);
		// init Group
                mgr.setStateMachineMappedRam("SVMControl", "Group", 0, 2);
                mgr.setStateMachineMappedRam("SVMControl", "Group", 1, 2); 
                // init hXi
                mgr.setMappedRam("hXi", 0, -17.949707);
                mgr.setMappedRam("hXi", 1, 17.9498291);
		
		/////////////////////// Set Input Data ///////////////////////

		double [][] Xc = {{2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}};
		double [] Yc = {1402.109985, 1403.449951, 1441.469971, 1457.599976, 1438.560059, 1432.250000, 1449.680054, 1465.150024};
		
		List<Bits> XcRawBits = Def.FloatVectorDataGenerator(Xc, 8, 1);
		
		mgr.setInputDataRaw("Xc", XcRawBits);
		mgr.setInputData("Yc", Yc);
		
		/////////////////////// Run ///////////////////////
		
		mgr.setKernelCycles(numTicks);
		mgr.runTest();
	}
	
}
