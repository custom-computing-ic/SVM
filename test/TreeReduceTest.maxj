import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.junit.Assert;
import org.junit.Test;

import maxpower.TreeReduce;

public class TreeReduceTest {
	static class TestAdder implements TreeReduce.Reducer<Integer> {
		private final int n;

		TestAdder(int n) {
			this.n = n;
		}

		@Override
		public int getMaxNumValues() { return n; }

		@Override
		public Integer reduce(List<Integer> values) {
			if (values.isEmpty())
				throw new RuntimeException("Received empty list");

			if (values.size() > n)
				throw new RuntimeException("Received more values than expected");

			int sum = 0;
			for (int v : values) sum += v;
			return sum;
		}
	}

	@Test
	public void testTreeReduce() {
		long seed = System.currentTimeMillis();
		System.out.println("Using seed: " + seed);

		final int ITER = 1000;

		Random rng = new Random(seed);

		for (int iter = 0; iter < ITER; ++iter) {
			final int N = rng.nextInt(256) + 1;

			List<Integer> values = new ArrayList<Integer>(N);

			int expected = 0;
			for (int i = 0; i < N; ++i) {
				int v = rng.nextInt();
				values.add(v);
				expected += v;
			}

			for (int n = 2; n < 5; ++n) {
				TestAdder adder = new TestAdder(n);
				Assert.assertEquals("tree reduce, n = "+n, expected, (int) TreeReduce.reduce(adder, values));
			}
		}
	}
}
