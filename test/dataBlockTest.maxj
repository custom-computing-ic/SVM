//import static org.junit.Assert.assertTrue;
//import java.util.Random;
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
//import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
//import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class dataBlockTest {

	private class dataBlockTestKernel extends Kernel {
	
		dataBlockTestKernel(KernelParameters parameters, int numBlocks, int blockDim, int dataDim) {
		
			super(parameters);
			
			// Tick Counter
			DFEVar Tick = control.count.simpleCounter(32);
			
			// A new Item every 8 cycles
			Count.Params EnInputParam = control.count.makeParams(3);
			Counter EnInputCounter = control.count.makeCounter(EnInputParam);
			DFEVar EnInputCount = EnInputCounter.getCount();
			DFEVar EnInput = (EnInputCount === 0);
			
			// Input
			DFEVectorType<DFEVar> VecType = new DFEVectorType<DFEVar>(Def.DataType, dataDim);
			DFEVector<DFEVar> Xc = io.input("Xc", VecType, EnInput);
			
			// Offset Address of Xc
			Count.Params OffsetAddrXcParam = control.count.makeParams(MathUtils.bitsToAddress(blockDim))
											.withMax(blockDim)
											.withEnable(EnInputCounter.getWrap());
			Counter OffsetAddrXcCounter = control.count.makeCounter(OffsetAddrXcParam);
			DFEVar OffsetAddrXc = OffsetAddrXcCounter.getCount();
			
			// Base Address of Xc
			Count.Params BaseAddrXcParam = control.count.makeParams(MathUtils.bitsToAddress(blockDim))
											.withMax(blockDim)
											.withEnable(OffsetAddrXcCounter.getWrap());
			Counter BaseAddrXcCounter = control.count.makeCounter(BaseAddrXcParam);
			DFEVar BaseAddrXc = BaseAddrXcCounter.getCount();		
			

			// dataX
			dataXBlock [] DataXBlock = new dataXBlock[numBlocks];
			DFEVar [] isValid = new DFEVar[numBlocks];
			DFEVector<DFEVector<DFEVar>> dataX = (new DFEVectorType<DFEVector<DFEVar>>(VecType, numBlocks)).newInstance(this);
			for (int i=0; i<numBlocks; ++i) {
				DataXBlock[i] = new dataXBlock(this, i, blockDim, dataDim, Xc, BaseAddrXc, OffsetAddrXc, EnInput);
				dataX[i] <== DataXBlock[i].getData();
				isValid[i] = DataXBlock[i].isValid();
			}

			// SimPrintf
			AddrGenerator AddrGen = new AddrGenerator(this, 1, blockDim, EnInput);
                	DFEVar Addr = AddrGen.getAddr();
			debug.simPrintf(EnInput, "------------------------------------------------------------------\n");
			debug.simPrintf("[%3d](Dim=0) Xc[%d][%d]<=%d, dataX[0:3][%d]=(%d,%d,%d,%d), isValid=%d \n", Tick, BaseAddrXc, OffsetAddrXc, Xc[0], Addr, dataX[0][0], dataX[1][0], dataX[2][0], dataX[3][0], isValid[0]);


		}
	}


	@Test 
	public void test1() {
		final int numTicks = 200;
		final int VecWidth = 30;
		final int numBlocks = 4;
		final int blockDim = 4;
		int [][] data = new int[numTicks][VecWidth];
		for (int tick=0; tick<200; ++tick) {
			for (int dim=0; dim<VecWidth; ++dim) {
				data[tick][dim] = tick*100;
			}
		}
		List<Bits> input = Def.IntVectorDataGenerator(data, numTicks, VecWidth);
		test(numTicks, numBlocks, blockDim, VecWidth, input);
	}
	
	private void test(int numTicks, int numBlocks, int blockDim, int dataDim, List<Bits> data) {
		SimulationManager mgr = new SimulationManager("dataBlockTest");
		dataBlockTestKernel kernel = new dataBlockTestKernel(mgr.makeKernelParameters(), numBlocks, blockDim, dataDim);
		mgr.setKernel(kernel);
		mgr.setInputDataRaw("Xc", data);
		mgr.setKernelCycles(numTicks);
		mgr.runTest();
	}
}
